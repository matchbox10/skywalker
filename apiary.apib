FORMAT: 1A

# Skywalker
Proof of concept API for integration into Pricing tools. Lots of work still to do but should serve as a starting point for discussion.

This is a live, documentaion based API design. The API requests and response will be defined in this document before being then developed.

## Guidelines

This document provides guidelines and examples for Skywalker Web APIs, encouraging consistency, maintainability, and best practices across applications. Skywalker APIs aim to balance a truly RESTful API interface with a positive developer experience (DX).

This document borrows heavily from:
* [Designing HTTP Interfaces and RESTful Web Services](https://www.youtube.com/watch?v=zEyg0TnieLg)
* [API Facade Pattern](http://apigee.com/about/resources/ebooks/api-fa%C3%A7ade-pattern), by Brian Mulloy, Apigee
* [Web API Design](http://pages.apigee.com/web-api-design-ebook.html), by Brian Mulloy, Apigee
* [Fielding's Dissertation on REST](http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm)

## Pragmatic REST

These guidelines aim to support a truly RESTful API. Here are a few exceptions:
* Put the version number of the API in the URL (see examples below). Don’t accept any requests that do not specify a version number.
* Allow users to request formats like JSON or XML like this:
    * http://www.skywalker.net/api/v1/sites.json
    * http://www.skywalker.net/api/v1/sites.xml
* Default response should be formatted as JSON.

## RESTful URLs

### General guidelines for RESTful URLs
* A URL identifies a resource.
* URLs should include nouns, not verbs.
* Use plural nouns only for consistency (no singular nouns).
* Use HTTP verbs (GET, POST, PUT, DELETE) to operate on the collections and elements.
* You shouldn’t need to go deeper than resource/identifier/resource.
* Put the version number at the base of your URL, for example http://example.com/v1/path/to/resource.
* URL v. header:
    * If it changes the logic you write to handle the response, put it in the URL.
    * If it doesn’t change the logic for each response, like OAuth info, put it in the header.
* Specify optional fields in a comma separated list.
* Formats should be in the form of api/v2/resource/{id}.json

## HTTP Verbs

HTTP verbs, or methods, should be used in compliance with their definitions under the [HTTP/1.1](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html) standard.
The action taken on the representation will be contextual to the media type being worked on and its current state. Here's an example of how HTTP verbs map to create, read, update, delete operations in a particular context:

| HTTP METHOD | POST            | GET       | PUT         | DELETE |
| ----------- | --------------- | --------- | ----------- | ------ |
| CRUD OP     | CREATE          | READ      | UPDATE      | DELETE |
| /dogs       | Create new dogs | List dogs | Bulk update | Delete all dogs |
| /dogs/1234  | Error           | Show Bo   | If exists, update Bo; If not, error | Delete Bo |

(Example from Web API Design, by Brian Mulloy, Apigee.)


## Responses

* No values in keys
* No internal-specific names (e.g. "node" and "taxonomy term")
* Metadata should only contain direct properties of the response set, not properties of the members of the response set

### Good examples

No values in keys:

    "tags": [
      {"id": "125", "name": "Environment"},
      {"id": "834", "name": "Water Quality"}
    ],


### Bad examples

Values in keys:

    "tags": [
      {"125": "Environment"},
      {"834": "Water Quality"}
    ],


## Error handling

Error responses should include a common HTTP status code, message for the developer, message for the end-user (when appropriate), internal error code (corresponding to some specific internally determined ID), links where developers can find more info. For example:

    {
      "status" : 400,
      "developerMessage" : "Verbose, plain language description of the problem. Provide developers
       suggestions about how to solve their problems here",
      "userMessage" : "This is a message that can be passed along to end-users, if needed.",
      "errorCode" : "444444",
      "moreInfo" : "http://www.skywalker.net/developer/path/to/help/for/444444,
    }

Use three simple, common response codes indicating (1) success, (2) failure due to client-side problem, (3) failure due to server-side problem:
* 200 - OK
* 400 - Bad Request
* 500 - Internal Server Error


## Versions

* Never release an API without a version number.
* Versions should be integers, not decimal numbers, prefixed with ‘v’. For example:
    * Good: v1, v2, v3
    * Bad: v-1.1, v1.2, 1.3
* Maintain APIs at least one version back.


## Record limits

* If no limit is specified, return results with a default limit.
* To get records 51 through 75 do this:
    * http://www.skywalker.netv/sites?limit=25&offset=50
    * offset=50 means, ‘skip the first 50 records’
    * limit=25 means, ‘return a maximum of 25 records’

Information about record limits and total available count should also be included in the response. Example:

    {
        "metadata": {
            "resultset": {
                "count": 227,
                "offset": 25,
                "limit": 25
            }
        },
        "results": []
    }

## Mock Responses
It is suggested that each resource accept a 'mock' parameter on the testing server. Passing this parameter should return a mock data response (bypassing the backend).

Implementing this feature early in development ensures that the API will exhibit consistent behavior, supporting a test driven development methodology.

Note: If the mock parameter is included in a request to the production environment, an error should be raised.


## JSONP

JSONP is easiest explained with an example. Here's one from [StackOverflow](http://stackoverflow.com/questions/2067472/what-is-jsonp-all-about?answertab=votes#tab-top):

> Say you're on domain abc.com, and you want to make a request to domain xyz.com. To do so, you need to cross domain boundaries, a no-no in most of browserland.

> The one item that bypasses this limitation is `<script>` tags. When you use a script tag, the domain limitation is ignored, but under normal circumstances, you can't really DO anything with the results, the script just gets evaluated.

> Enter JSONP. When you make your request to a server that is JSONP enabled, you pass a special parameter that tells the server a little bit about your page. That way, the server is able to nicely wrap up its response in a way that your page can handle.

> For example, say the server expects a parameter called "callback" to enable its JSONP capabilities. Then your request would look like:

>         http://www.xyz.com/sample.aspx?callback=mycallback

> Without JSONP, this might return some basic javascript object, like so:

>         { foo: 'bar' }

> However, with JSONP, when the server receives the "callback" parameter, it wraps up the result a little differently, returning something like this:

>         mycallback({ foo: 'bar' });

> As you can see, it will now invoke the method you specified. So, in your page, you define the callback function:

>         mycallback = function(data){
>             alert(data.foo);
>         };

http://stackoverflow.com/questions/2067472/what-is-jsonp-all-about?answertab=votes#tab-top

## Authentication and Security

### SSL

All requests should only be made via SSL. `https://www.skywalker.net/api`. The service will not accept connections on port 80/HTTP.

### OAuth

Authentication is handled via [OAuth2](http://oauth.net/). OAuth2 is a protocol that lets external apps request authorization to private details in a user’s GitHub account without getting their password. This is preferred over Basic Authentication because tokens can be limited to specific types of data, and can be revoked by users at any time.

Requests that require authentication should return a `403 Forbidden` error in the event of no authentication.

### OAuth2 Token (sent in a header)

`$ curl -H "Authorization: token OAUTH-TOKEN" https://www.skywalker.net/api/v1/`

### OAuth2 Token (sent as a parameter)

`$ curl "https://www.skywalker.net/api/v1/sites/?access_token=OAUTH-TOKEN"`

### OAuth2 Key/Secret

`$ curl "https://www.skywalker.net/api/v1/sites/?client_id=xxxx&amp;client_secret=yyyy"`

This should only be used in server to server scenarios. Don’t leak your OAuth application’s client secret to your users.

### Failed Login Limit

Authenticating with invalid credentials will return `401 Unauthorized`:

    $ curl -i https://www.skywalker.net/api/v1/ -u foo:bar

    HTTP/1.1 401 Unauthorized

    {
        "message": "Bad credentials",
        "documentation_url": "https://developer.skywalker.net/v1"
    }

After detecting several requests with invalid credentials within a short period, the API will temporarily reject all authentication attempts for that user (including ones with valid credentials) with `403 Forbidden`:

    $ curl -i https://www.skywalker.net/api/v1 -u valid_username:valid_password

    HTTP/1.1 403 Forbidden

    {
        "message": "Maximum number of login attempts exceeded. Please try again later.",
        "documentation_url": "https://developer.skywalker.net/v1"
    }

### User Agent Required

All API requests MUST include a valid User-Agent header. Requests with no User-Agent header will be rejected. We request that you use your API username, or the name of your application, for the User-Agent header value. This allows us to contact you if there are problems.

Here’s an example:

    User-Agent: Awesome-Skywalker-App

If you provide an invalid User-Agent header, you will receive a `403 Forbidden` response:

    $ curl -iH 'User-Agent: ' https://www.skywalker.net/api
    HTTP/1.0 403 Forbidden
    Connection: close
    Content-Type: text/html

    Request forbidden by administrative rules.
    Please make sure your request has a User-Agent header.
    Check https://developer.skywalker.net for other possible causes.

### IP Address Whitelisting

Only known IP addresses will be allowed to access the API. Developers should contact Skywalker to have their IP addresses whitelisted.
# API Root [/]
API entry point.

This resource does not have any attributes. Instead it offers the initial API affordances in the form of the HTTP Link header and HAL links.

### Todo

- Update for live API and decide what we want to display. This is simply an example.

## Retrieve Entry Point [GET]
+ Response 200 (application/hal+json)
    + Headers
    
            Link: <https://skywalker1.apiary.io/>;rel="self",<https://skywalker1.apiary.io/>;rel="sites"

    + Body
    
            {
                "_links": {
                    "self": { "href": "/" },
                    "sites": { "href": "/sites", "templated": true }
                }
            }

# Group Cities
City related resources.

### Todo

- Define Fields to be returned.
- Define if we will allow creation, editing and deletion of cities.
- Do we want to be able to return associated sites per city?

## List Cities [/cities]
List of all cities.

### List All Cities [GET]
+ Response 200 (application/json)

        [{
            "id": 1, "name": "London", "country": "United Kingdom"
        }, {
            "id": 2, "name": "Berlin", "country": "Germany"
        }]

### Create A New City [POST]
To create a new city pass the following parameters as JSON attributes.
+ Request (application/json)

        {
            "name": "Paris", "country": "France"  
        }
        
+ Response 201
        
        {
            "id": 3, "name": "Paris", "country": "France"
        }

## Search Cities [/cities/{?search}]
Returns a list of cities based on the search query.

### Todo
- Define how we handle ambiguities.

+ Parameters
    + search ( optional, string, `london` ) ... Query string to search for. Spaces and white space should be escaped.

### Search for a City [GET]
+ Response 200 (application/json)

    + Header
    
            X-City-Query: The Value
            
    + Body
    
            [{
                "id": 1, "name": "London", "country": "United Kingdom"
            }]        

## City [/cities/{id}]
Returns a single city with all its attributes.

+ Parameters
    + id ( required, number, `1` ) ... Number `id` of the City to perform action with. Has example value.

### Get Single City [GET]
+ Response 200 (application/json)

    + Header

            X-City-ID: The Value
        
    + Body
    
            { "id": 1, "name": "London", "country": "United Kingdom" }

### Edit City [PATCH]
+ Request (application/json)
    
        {
            "country": "UK"
        }

+ Response 200

        {
            "id": 1, "name": "London", "country": "UK"
        }

### Delete a City [DELETE]
+ Response 204

# Group Sites
Site related resources.

### Todo

- Define Fields to be returned.
- Define if we will allow creation, editing and deletion of sites.

## Site List [/sites]
List of all sites.

### List all Sites [GET]
+ Response 200 (application/json)

        [{
            "id": 1, "name": "Site Name 1", "address line 1": "123 Anystreet", "address line 2": "", "address line 3": "", "town": "London", "county": "London", "country": "United Kingdom", "postcode": "E14 2AB", "city_id": 1
        }, {
            "id": 2, "name": "Site Name 2", "address line 1": "123 Anystreet", "address line 2": "", "address line 3": "", "town": "London", "county": "London", "country": "United Kingdom", "postcode": "E14 2AB", "city_id": 4
        }]

## Site Search [/sites/{?search}]
Returns a list of sites based on the search query.

### Todo
- Define how we handle ambiguities.

+ Parameters
    + search ( optional, string, `E14%202AB` ) ... Query string to search for. Spaces and white space should be escaped.

### Search for a Site [GET]
+ Response 200 (application/json)

    + Header
    
            X-Site-Query: The Value
            
    + Body
    
            [{
                "id": 1, "name": "Site Name 1", "address line 1": "123 Anystreet", "address line 2": "", "address line 3": "", "town": "London", "county": "London", "country": "United Kingdom", "postcode": "E14 2AB"
            }, {
                "id": 2, "name": "Site Name 2", "address line 1": "123 Anystreet", "address line 2": "", "address line 3": "", "town": "London", "county": "London", "country": "United Kingdom", "postcode": "E14 2AB"
            }]        

## Single Site [/sites/{id}]
Returns a single site with all its attributes.

+ Parameters
    + id ( required, number, `1` ) ... Number `id` of the Site to perform action with. Has example value.

### Retrieve a Site [GET]
+ Response 200 (application/json)

    + Header

            X-Site-ID: The Value
        
    + Body
    
            { "id": 1, "name": "Site Name 1", "address line 1": "123 Anystreet", "address line 2": "", "address line 3": "", "town": "London", "county": "London", "country": "United Kingdom", "postcode": "E14 2AB" }

### Remove a Site [DELETE]
+ Response 204

# Group Services
Service related resources.

## Product List [/services]
Returns a list of available services.

### List all Services [GET]
+ Response 200 (application/json)

        [{
            "id": 1, "name": "Wavelength - SDH/SONET"
        }, {
            "id": 2, "name": "Wavelength - OTN"
        }, {
            "id": 3, "name": "Wavelength - Ethernet"
        }, {
            "id": 4, "name": "Fast Trade"
        }]

## Single Service [/services/{id}]
Returns a single service with all its attributes.

+ Parameters
    + id ( required, number, `1` ) ... Number `id` of the Service to perform action with. Has example value.

### Retrieve a Service [GET]
+ Response 200 (application/json)

    + Header

            X-Product-ID: The Value
        
    + Body
    
            { "id": 1, "name": "Wavelength - SDH/SONET" }

### Remove a Service [DELETE]
+ Response 204

# Group Ports/Interfaces
Port/Interface related resources.

## Port List [/ports]
Returns a list of available ports.

### List all Ports [GET]
+ Response 200 (application/json)

        [{
            "id": 1, "name": "STM16/OC48", "service_id": 1
        }, {
            "id": 2, "name": "STM64/OC192", "service_id": 1
        },{
            "id": 3, "name": "OTU1", "service_id": 2
        }, {
            "id": 4, "name": "OTU2", "service_id": 2
        },{
            "id": 5, "name": "GigE", "service_id": 3
        }, {
            "id": 6, "name": "10GigE", "service_id": 3
        }]

## Single Port [/ports/{id}]
Returns a single service with all its attributes.

+ Parameters
    + id ( required, number, `1` ) ... Number `id` of the Port to perform action with. Has example value.

### Retrieve a Port [GET]
+ Response 200 (application/json)

    + Header

            X-Service-ID: The Value
        
    + Body
    
            { "id": 1, "name": "STM16/OC48", "service_id": 1 }

### Remove a Port [DELETE]
+ Response 204

# Group Quotes
Pricing related resources.

## Quote List [/quotes]
Returns a list of quotes created or assigned to the user.

### Todo
- Determine how we want to show ALL quotes to internal users.
- Can customers return quotes from other users within their own organisation?
- LOTS of fields need defining

### List all Quotes [GET]
+ Response 200 (application/json)

        [{
            "id": 1, "reference": "Quote 1", "site_id": 1, "site_b_id": 4, "product_id": 1, "service_id": 2, "customer_id": 1, "term": 3, "lease_type": "monthly", "mrc": "3750.00", "nrc": "7500.00"
        }, {
            "id": 2, "reference": "Quote 2", "site_id": 2, "site_b_id": 6, "product_id": 2, "service_id": 1, "customer_id": 1, "term": 5, "lease_type": "annual", "mrc": "2500.00", "nrc": "10000.00"
        }]

### Create A New Quote [POST]
To create a new quote pass the following parameters as JSON attributes. Currency will always be EUR. Customer ID will be auto-populated.

+ Request (application/json)

        {
            "reference": "My internal reference", "site_id": 1, "site_b_id": 4, "product_id": 1, "service_id": 2, "term": 3, "lease_type": "monthly"  
        }
        
+ Response 201
        
        {
            "id": 2, "reference": "My internal reference", "site_id": 1, "site_b_id": 4, "product_id": 1, "service_id": 1, "customer_id": 1, "term": 3, "lease_type": "monthly", "mrc": "750.00", "nrc": "2500.00"
        }

## Single Quote [/quotes/{id}]
Returns a single quote with all its attributes.

+ Parameters
    + id ( required, number, `1` ) ... Number `id` of the Quote to perform action with. Has example value.

### Retrieve a Quote [GET]
+ Response 200 (application/json)

    + Header

            X-Quote-ID: The Value
        
    + Body
    
            { "id": 1, "reference": "Quote 1", "site_id": 1, "site_b_id": 4, "product_id": 1, "service_id": 2, "customer_id": 1, "term": 3, "lease_type": "monthly", "mrc": "3750.00", "nrc": "7500.00" }

### Remove a Service [DELETE]
+ Response 204

# Group Orders
TBD
